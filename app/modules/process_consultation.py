import logging
import re
import httpx
from datetime import datetime
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from app.core.registry import module_registry
from app.core.database import mongo_db
from app.core.config import Config
from app.modules.affiliate_system import affiliate_system

logger = logging.getLogger(__name__)

class ProcessConsultation:
    def __init__(self):
        # APIs de consulta de processos (exemplos)
        self.apis = {
            'tjsp': 'https://api.tjsp.jus.br/v1/processos',
            'tjmg': 'https://api.tjmg.jus.br/v1/processos',
            'tjrs': 'https://api.tjrs.jus.br/v1/processos'
        }
        
        # Padr√µes de n√∫meros de processo
        self.process_patterns = {
            'cnj': r'^\d{7}-\d{2}\.\d{4}\.\d{1,2}\.\d{2}\.\d{4}$',
            'tjsp': r'^\d{7}-\d{2}\.\d{4}\.\d{1,2}\.\d{2}\.\d{4}$',
            'custom': r'^\d{4}\.\d{3}\.\d{6}-\d{1}$'
        }
    
    def validate_cpf(self, cpf: str) -> bool:
        """Validar CPF brasileiro"""
        # Remover caracteres n√£o num√©ricos
        cpf = re.sub(r'\D', '', cpf)
        
        if len(cpf) != 11 or cpf == cpf[0] * 11:
            return False
        
        # Validar primeiro d√≠gito verificador
        sum = 0
        for i in range(9):
            sum += int(cpf[i]) * (10 - i)
        remainder = sum % 11
        digit1 = 0 if remainder < 2 else 11 - remainder
        
        if digit1 != int(cpf[9]):
            return False
        
        # Validar segundo d√≠gito verificador
        sum = 0
        for i in range(10):
            sum += int(cpf[i]) * (11 - i)
        remainder = sum % 11
        digit2 = 0 if remainder < 2 else 11 - remainder
        
        return digit2 == int(cpf[10])
    
    def format_cpf(self, cpf: str) -> str:
        """Formatar CPF para exibi√ß√£o"""
        cpf = re.sub(r'\D', '', cpf)
        return f"{cpf[:3]}.{cpf[3:6]}.{cpf[6:9]}-{cpf[9:]}"
    
    def validate_process_number(self, process_number: str) -> Dict:
        """Validar e identificar tipo de n√∫mero de processo"""
        process_number = process_number.strip().upper()
        
        for process_type, pattern in self.process_patterns.items():
            if re.match(pattern, process_number):
                return {
                    'valid': True,
                    'type': process_type,
                    'formatted': process_number
                }
        
        return {'valid': False, 'type': 'invalid', 'formatted': process_number}
    
    async def consult_by_cpf(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Consultar processos por CPF"""
        user_id = update.effective_user.id
        
        if not context.args:
            await update.message.reply_text(
                "üîç **Consulta de Processos por CPF**\n\n"
                "üí° **Uso:** /consultarcpf <CPF>\n\n"
                "Exemplo:\n"
                "`/consultarcpf 123.456.789-00`\n"
                "`/consultarcpf 12345678900`\n\n"
                "‚ö†Ô∏è *A consulta segue a legisla√ß√£o de prote√ß√£o de dados.*",
                parse_mode='Markdown'
            )
            return
        
        cpf_input = " ".join(context.args)
        
        if not self.validate_cpf(cpf_input):
            await update.message.reply_text(
                "‚ùå CPF inv√°lido. Por favor, insira um CPF v√°lido com 11 d√≠gitos.\n\n"
                "Exemplos v√°lidos:\n"
                "‚Ä¢ 123.456.789-00\n"
                "‚Ä¢ 12345678900"
            )
            return
        
        cpf_clean = re.sub(r'\D', '', cpf_input)
        cpf_formatted = self.format_cpf(cpf_clean)
        
        await update.message.reply_text(f"üîç Consultando processos para CPF: `{cpf_formatted}`...", parse_mode='Markdown')
        
        # Simular consulta (substituir por API real)
        processes = await self.mock_consult_by_cpf(cpf_clean)
        
        if processes:
            response = f"üìÑ **Processos encontrados para CPF {cpf_formatted}:**\n\n"
            
            for i, process in enumerate(processes, 1):
                response += (
                    f"**Processo {i}:**\n"
                    f"‚Ä¢ N√∫mero: `{process['numero']}`\n"
                    f"‚Ä¢ Tribunal: {process['tribunal']}\n"
                    f"‚Ä¢ Assunto: {process['assunto']}\n"
                    f"‚Ä¢ Situa√ß√£o: {process['situacao']}\n"
                    f"‚Ä¢ √öltima movimenta√ß√£o: {process['ultima_movimentacao']}\n"
                    f"‚Ä¢ Valor da causa: {process.get('valor_causa', 'N√£o informado')}\n\n"
                )
            
            response += "üí° *Use /consultarprocesso <n√∫mero> para detalhes completos.*"
            
            # Registrar convers√£o para afiliados
            await affiliate_system.record_conversion(user_id, 'process_consultation', 25.0)
            
        else:
            response = f"‚ùå Nenhum processo encontrado para o CPF `{cpf_formatted}`."
        
        # Log da consulta
        mongo_db.log_query(user_id, 'cpf_consultation', cpf_formatted, response[:200] + "..." if len(response) > 200 else response)
        
        await update.message.reply_text(response, parse_mode='Markdown')
    
    async def consult_by_process(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Consultar processo por n√∫mero"""
        user_id = update.effective_user.id
        
        if not context.args:
            await update.message.reply_text(
                "‚öñÔ∏è **Consulta de Processo**\n\n"
                "üí° **Uso:** /consultarprocesso <n√∫mero do processo>\n\n"
                "Exemplos:\n"
                "`/consultarprocesso 0001234-56.2023.8.26.0100`\n"
                "`/consultarprocesso 1234567-89.2023.8.26.0100`\n\n"
                "üìù *Formatos aceitos: CNJ, TJSP, customizado*",
                parse_mode='Markdown'
            )
            return
        
        process_number = " ".join(context.args)
        validation = self.validate_process_number(process_number)
        
        if not validation['valid']:
            await update.message.reply_text(
                "‚ùå N√∫mero de processo inv√°lido.\n\n"
                "üí° **Formatos v√°lidos:**\n"
                "‚Ä¢ CNJ: 0001234-56.2023.8.26.0100\n"
                "‚Ä¢ TJSP: 1234567-89.2023.8.26.0100\n"
                "‚Ä¢ Custom: 2023.001.123456-7"
            )
            return
        
        await update.message.reply_text(f"üîç Consultando processo: `{validation['formatted']}`...", parse_mode='Markdown')
        
        # Simular consulta detalhada
        process_details = await self.mock_consult_process_details(validation['formatted'])
        
        if process_details:
            response = (
                f"‚öñÔ∏è **Processo: {process_details['numero']}**\n\n"
                f"üìã **Detalhes:**\n"
                f"‚Ä¢ Tribunal: {process_details['tribunal']}\n"
                f"‚Ä¢ Classe: {process_details['classe']}\n"
                f"‚Ä¢ Assunto: {process_details['assunto']}\n"
                f"‚Ä¢ Situa√ß√£o: {process_details['situacao']}\n"
                f"‚Ä¢ Distribui√ß√£o: {process_details['distribuicao']}\n"
                f"‚Ä¢ Valor: {process_details.get('valor_causa', 'N√£o informado')}\n\n"
                
                f"üë• **Partes:**\n"
            )
            
            for parte in process_details['partes'][:4]:  # Limitar a 4 partes
                response += f"‚Ä¢ {parte['tipo']}: {parte['nome']}\n"
            
            if len(process_details['partes']) > 4:
                response += f"‚Ä¢ ... e mais {len(process_details['partes']) - 4} partes\n"
            
            response += f"\nüìÖ **√öltimas Movimenta√ß√µes:**\n"
            for mov in process_details['movimentacoes'][:3]:  # √öltimas 3 movimenta√ß√µes
                response += f"‚Ä¢ {mov['data']}: {mov['descricao']}\n"
            
            # Registrar convers√£o para afiliados
            await affiliate_system.record_conversion(user_id, 'process_consultation', 35.0)
            
        else:
            response = f"‚ùå Processo `{validation['formatted']}` n√£o encontrado."
        
        # Log da consulta
        mongo_db.log_query(user_id, 'process_consultation', validation['formatted'], response[:200] + "..." if len(response) > 200 else response)
        
        await update.message.reply_text(response, parse_mode='Markdown')
    
    async def mock_consult_by_cpf(self, cpf: str) -> List[Dict]:
        """Simular consulta por CPF (substituir por API real)"""
        # Dados mock para demonstra√ß√£o
        mock_data = {
            "12345678900": [
                {
                    "numero": "0001234-56.2023.8.26.0100",
                    "tribunal": "TJSP - S√£o Paulo",
                    "assunto": "A√ß√£o de Indeniza√ß√£o por Danos Morais",
                    "situacao": "Em andamento",
                    "ultima_movimentacao": "15/10/2023 - Julgamento",
                    "valor_causa": "R$ 50.000,00"
                },
                {
                    "numero": "0005678-90.2022.8.26.0200", 
                    "tribunal": "TJSP - S√£o Paulo",
                    "assunto": "Execu√ß√£o de T√≠tulo Extrajudicial",
                    "situacao": "Conclu√≠do",
                    "ultima_movimentacao": "20/12/2022 - Arquivo",
                    "valor_causa": "R$ 25.000,00"
                }
            ],
            "98765432100": [
                {
                    "numero": "2023.001.123456-7",
                    "tribunal": "TJMG - Minas Gerais", 
                    "assunto": "A√ß√£o Trabalhista",
                    "situacao": "Em andamento",
                    "ultima_movimentacao": "10/11/2023 - Audi√™ncia",
                    "valor_causa": "R$ 30.000,00"
                }
            ]
        }
        
        return mock_data.get(cpf, [])
    
    async def mock_consult_process_details(self, process_number: str) -> Optional[Dict]:
        """Simular consulta detalhada de processo (substituir por API real)"""
        mock_details = {
            "0001234-56.2023.8.26.0100": {
                "numero": "0001234-56.2023.8.26.0100",
                "tribunal": "TJSP - S√£o Paulo",
                "classe": "A√ß√£o de Indeniza√ß√£o por Danos Morais",
                "assunto": "Indeniza√ß√£o por Danos Morais",
                "situacao": "Em andamento",
                "distribuicao": "15/03/2023 - Distribui√ß√£o por sorteio",
                "valor_causa": "R$ 50.000,00",
                "partes": [
                    {"tipo": "Autor", "nome": "Jo√£o Silva"},
                    {"tipo": "R√©u", "nome": "Empresa XYZ Ltda"},
                    {"tipo": "Advogado", "nome": "Dr. Carlos Santos"},
                    {"tipo": "Advogado", "nome": "Dra. Maria Oliveira"}
                ],
                "movimentacoes": [
                    {"data": "15/10/2023", "descricao": "Julgamento - Aguardando despacho"},
                    {"data": "10/09/2023", "descricao": "Audi√™ncia de Concilia√ß√£o - N√£o houve acordo"},
                    {"data": "15/03/2023", "descricao": "Distribui√ß√£o por sorteio"}
                ]
            }
        }
        
        return mock_details.get(process_number)

# Inst√¢ncia global do sistema de consulta
process_consultation = ProcessConsultation()

# Registrar comandos
module_registry.register_command("consultarcpf", process_consultation.consult_by_cpf, "Consultar processos por CPF")
module_registry.register_command("consultarprocesso", process_consultation.consult_by_process, "Consultar processo por n√∫mero")

module_registry.register_module("process_consultation")
