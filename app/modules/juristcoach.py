import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, ConversationHandler, MessageHandler, filters
from app.core.registry import module_registry
from app.core.database import mongo_db
from app.core.config import Config
from app.modules.ia_services import ai_service
from app.modules.affiliate_system import affiliate_system

logger = logging.getLogger(__name__)

# Estados da conversa para o JuristCoach
CHOOSING, ANALYZING_CAREER, SETTING_GOALS, RECEIVING_ADVICE, TRACKING_PROGRESS = range(5)

class JuristCoach:
    def __init__(self):
        self.career_paths = {
            'advocacia_privada': 'üèõÔ∏è Advocacia Privada',
            'advocacia_publica': '‚öñÔ∏è Advocacia P√∫blica', 
            'magistratura': 'üë®‚Äç‚öñÔ∏è Magistratura',
            'ministerio_publico': 'üîç Minist√©rio P√∫blico',
            'delegacia': 'üïµÔ∏è‚Äç‚ôÇÔ∏è Carreira Policial',
            'empresarial': 'üíº Direito Empresarial',
            'academico': 'üéì Carreira Acad√™mica',
            'outro': 'üîÆ Outra Carreira'
        }
        
        self.skill_categories = {
            'argumentacao': 'üéØ Argumenta√ß√£o Jur√≠dica',
            'redacao': 'üìù Reda√ß√£o Jur√≠dica', 
            'oratoria': 'üé§ Orat√≥ria',
            'negociacao': 'ü§ù Negocia√ß√£o',
            'pesquisa': 'üîé Pesquisa Jur√≠dica',
            'tecnologia': 'üíª Tecnologia Jur√≠dica',
            'gestao': 'üìä Gest√£o de Escrit√≥rio',
            'ingles': 'üåé Ingl√™s Jur√≠dico'
        }

    async def start_juristcoach(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Iniciar o JuristCoach - Assistente de Carreira Jur√≠dica"""
        user = update.effective_user
        
        welcome_text = (
            "üéØ **BEM-VINDO AO JURISTCOACH!**\n\n"
            "Seu *assistente pessoal de carreira jur√≠dica* com IA!\n\n"
            "‚ú® **O que posso fazer por voc√™:**\n"
            "‚Ä¢ üéØ An√°lise de perfil profissional\n"  
            "‚Ä¢ üöÄ Planejamento de carreira personalizado\n"
            "‚Ä¢ üìö Recomenda√ß√µes de estudo estrat√©gicas\n"
            "‚Ä¢ üíº Simula√ß√µes de entrevistas e provas\n"
            "‚Ä¢ üìà Acompanhamento de evolu√ß√£o\n"
            "‚Ä¢ üîÆ Previs√µes de mercado jur√≠dico\n\n"
            "Vamos transformar sua carreira jur√≠dica! üí´"
        )
        
        keyboard = [
            [InlineKeyboardButton("üéØ An√°lise de Perfil", callback_data="coach_analysis")],
            [InlineKeyboardButton("üöÄ Planejamento de Carreira", callback_data="coach_planning")],
            [InlineKeyboardButton("üìö Roteiro de Estudos", callback_data="coach_studyplan")],
            [InlineKeyboardButton("üíº Simulador de Entrevista", callback_data="coach_interview")],
            [InlineKeyboardButton("üìà Meu Progresso", callback_data="coach_progress")],
            [InlineKeyboardButton("üîÆ Tend√™ncias do Mercado", callback_data="coach_trends")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
        
        # Registrar uso do JuristCoach
        mongo_db.log_query(user.id, 'juristcoach_start', 'Iniciou JuristCoach', 'An√°lise de carreira iniciada')
        
        return CHOOSING

    async def career_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """An√°lise completa de perfil profissional"""
        query = update.callback_query
        await query.answer()
        
        analysis_text = (
            "üéØ **AN√ÅLISE DE PERFIL PROFISSIONAL**\n\n"
            "Vou analisar seu perfil para criar um plano *personalizado*!\n\n"
            "Por favor, me conte:\n"
            "1. Sua forma√ß√£o acad√™mica\n"
            "2. Experi√™ncias profissionais\n" 
            "3. √Åreas de interesse no Direito\n"
            "4. Seus principais objetivos\n"
            "5. Habilidades que deseja desenvolver\n\n"
            "üí° *Escreva tudo em uma √∫nica mensagem*"
        )
        
        keyboard = [[InlineKeyboardButton("üîô Voltar", callback_data="coach_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(analysis_text, reply_markup=reply_markup, parse_mode='Markdown')
        return ANALYZING_CAREER

    async def analyze_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Processar an√°lise de perfil com IA"""
        user_profile = update.message.text
        user_id = update.effective_user.id
        
        await update.message.reply_text("üîÆ **Analisando seu perfil com IA...**")
        
        # Prompt para an√°lise com IA
        analysis_prompt = f"""
        ANALISE ESTE PERFIL JUR√çDICO E FORNE√áA:

        PERFIL DO USU√ÅRIO:
        {user_profile}

        FORNE√áA UMA AN√ÅLISE ESTRUTURADA COM:

        1. **AN√ÅLISE SWOT PERSONALIZADA**
           - Pontos Fortes (com base no perfil)
           - Pontos Fracos (√°reas de melhoria)  
           - Oportunidades (no mercado jur√≠dico)
           - Amea√ßas (desafios previstos)

        2. **CARREIRAS RECOMENDADAS**
           - Top 3 carreiras mais adequadas
           - Justificativa para cada recomenda√ß√£o
           - Potencial de crescimento

        3. **PLANO DE DESENVOLVIMENTO**
           - Habilidades priorit√°rias para desenvolver
           - Cursos/certifica√ß√µes recomendados
           - Experi√™ncias pr√°ticas sugeridas

        4. **PREVIS√ÉO DE MERCADO**
           - Tend√™ncias para as √°reas recomendadas
           - Sal√°rios m√©dios esperados
           - Competitividade do mercado

        Formate a resposta de forma clara e motivadora!
        """

        # Obter an√°lise da IA
        analysis = await ai_service.get_legal_advice(analysis_prompt, "Voc√™ √© um coach de carreira jur√≠dica especializado.")
        
        # Salvar an√°lise no banco de dados
        coach_data = {
            'user_id': user_id,
            'profile_analysis': user_profile,
            'ia_analysis': analysis,
            'analysis_date': datetime.utcnow(),
            'coach_stage': 'profile_analyzed'
        }
        
        coach_collection = mongo_db.get_collection('juristcoach')
        coach_collection.update_one(
            {'user_id': user_id},
            {'$set': coach_data},
            upsert=True
        )
        
        # Enviar an√°lise completa
        response_text = (
            "üéâ **AN√ÅLISE COMPLETA DO SEU PERFIL!**\n\n"
            f"{analysis}\n\n"
            "üí´ *Use essas insights para impulsionar sua carreira!*"
        )
        
        # Dividir mensagem se for muito longa
        if len(response_text) > 4096:
            parts = [response_text[i:i+4096] for i in range(0, len(response_text), 4096)]
            for part in parts:
                await update.message.reply_text(part, parse_mode='Markdown')
        else:
            await update.message.reply_text(response_text, parse_mode='Markdown')
        
        # Registrar convers√£o para afiliados
        await affiliate_system.record_conversion(user_id, 'career_coaching', 50.0)
        
        keyboard = [
            [InlineKeyboardButton("üöÄ Criar Plano de A√ß√£o", callback_data="coach_action_plan")],
            [InlineKeyboardButton("üìö Ver Roteiro de Estudos", callback_data="coach_studyplan")],
            [InlineKeyboardButton("üîô Menu Principal", callback_data="coach_back_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text("üéØ **Qual o pr√≥ximo passo?**", reply_markup=reply_markup)
        return RECEIVING_ADVICE

    async def create_study_plan(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Criar roteiro de estudos personalizado"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # Buscar an√°lise do usu√°rio
        coach_collection = mongo_db.get_collection('juristcoach')
        user_data = coach_collection.find_one({'user_id': user_id})
        
        if not user_data or 'ia_analysis' not in user_data:
            await query.edit_message_text(
                "‚ùå Primeiro preciso analisar seu perfil!\n\n"
                "Use a op√ß√£o 'An√°lise de Perfil' para come√ßar."
            )
            return CHOOSING
        
        await query.edit_message_text("üìö **Criando seu roteiro de estudos personalizado...**")
        
        study_prompt = f"""
        BASEADO NA AN√ÅLISE ANTERIOR, CRIE UM ROTEIRO DE ESTUDOS:

        AN√ÅLISE DO USU√ÅRIO:
        {user_data.get('ia_analysis', '')}

        CRIE UM PLANO DE ESTUDOS DETALHADO COM:

        1. **CRONOGRAMA SEMANAL**
           - Distribui√ß√£o de horas por disciplina
           - Per√≠odos de revis√£o
           - Pausas estrat√©gicas

        2. **MATERIAIS RECOMENDADOS**
           - Livros essenciais por √°rea
           - Cursos online recomendados
           - Sites e blogs jur√≠dicos
           - Canais do YouTube

        3. **METODOLOGIA DE ESTUDO**
           - T√©cnicas de memoriza√ß√£o
           - Mapas mentais sugeridos
           - Exerc√≠cios pr√°ticos
           - Simulados peri√≥dicos

        4. **ACOMPANHAMENTO DE PROGRESSO**
           - M√©tricas de evolu√ß√£o
           - Pontos de verifica√ß√£o
           - Ajustes necess√°rios

        Formate como um plano execut√°vel de 3-6 meses!
        """

        study_plan = await ai_service.get_legal_advice(study_prompt, "Voc√™ √© um especialista em m√©todos de estudo jur√≠dico.")
        
        # Atualizar com plano de estudos
        coach_collection.update_one(
            {'user_id': user_id},
            {'$set': {
                'study_plan': study_plan,
                'study_plan_date': datetime.utcnow()
            }}
        )
        
        response_text = (
            "üìö **SEU ROTEIRO DE ESTUDOS PERSONALIZADO!**\n\n"
            f"{study_plan}\n\n"
            "üéØ *Siga este plano para maximizar seus resultados!*"
        )
        
        # Dividir mensagem se necess√°rio
        if len(response_text) > 4096:
            parts = [response_text[i:i+4096] for i in range(0, len(response_text), 4096)]
            for part in parts:
                await query.message.reply_text(part, parse_mode='Markdown')
        else:
            await query.message.reply_text(response_text, parse_mode='Markdown')
        
        keyboard = [
            [InlineKeyboardButton("üíº Simulador de Entrevista", callback_data="coach_interview")],
            [InlineKeyboardButton("üìà Acompanhar Progresso", callback_data="coach_progress")],
            [InlineKeyboardButton("üîô Menu Principal", callback_data="coach_back_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text("üéì **Preparado para os pr√≥ximos passos?**", reply_markup=reply_markup)
        return RECEIVING_ADVICE

    async def interview_simulator(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Simulador de entrevistas e provas"""
        query = update.callback_query
        await query.answer()
        
        simulator_text = (
            "üíº **SIMULADOR DE ENTREVISTAS E PROVAS**\n\n"
            "Escolha o tipo de simula√ß√£o:\n\n"
            "‚Ä¢ üèõÔ∏è **Entrevista Advocacia Privada**\n"
            "‚Ä¢ ‚öñÔ∏è **Entrevista Setor P√∫blico**\n" 
            "‚Ä¢ üë®‚Äç‚öñÔ∏è **Simulado para Magistratura**\n"
            "‚Ä¢ üîç **Simulado para MP**\n"
            "‚Ä¢ üïµÔ∏è‚Äç‚ôÇÔ∏è **Simulado para Pol√≠cia**\n"
            "‚Ä¢ üíº **Case Empresarial**\n"
        )
        
        keyboard = [
            [InlineKeyboardButton("üèõÔ∏è Advocacia Privada", callback_data="sim_private")],
            [InlineKeyboardButton("‚öñÔ∏è Setor P√∫blico", callback_data="sim_public")],
            [InlineKeyboardButton("üë®‚Äç‚öñÔ∏è Magistratura", callback_data="sim_judge")],
            [InlineKeyboardButton("üîç Minist√©rio P√∫blico", callback_data="sim_mp")],
            [InlineKeyboardButton("üïµÔ∏è‚Äç‚ôÇÔ∏è Pol√≠cia", callback_data="sim_police")],
            [InlineKeyboardButton("üíº Case Empresarial", callback_data="sim_business")],
            [InlineKeyboardButton("üîô Voltar", callback_data="coach_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(simulator_text, reply_markup=reply_markup, parse_mode='Markdown')
        return CHOOSING

    async def start_interview_simulation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Iniciar simula√ß√£o espec√≠fica"""
        query = update.callback_query
        await query.answer()
        
        simulation_type = query.data.replace('sim_', '')
        user_id = query.from_user.id
        
        simulation_types = {
            'private': 'advocacia privada',
            'public': 'setor p√∫blico', 
            'judge': 'magistratura',
            'mp': 'minist√©rio p√∫blico',
            'police': 'carreira policial',
            'business': 'direito empresarial'
        }
        
        sim_type = simulation_types.get(simulation_type, 'entrevista')
        
        # Gerar perguntas com IA
        await query.edit_message_text(f"üé≠ **Preparando simula√ß√£o para {sim_type}...**")
        
        simulation_prompt = f"""
        CRIE UMA SIMULA√á√ÉO DE ENTREVISTA/PROVA PARA:

        CARREIRA: {sim_type.upper()}

        FORNE√áA:

        1. **3 PERGUNTAS T√âCNICAS** espec√≠ficas da √°rea
        2. **2 PERGUNTAS COMPORTAMENTAIS** t√≠picas
        3. **1 CASE PR√ÅTICO** para resolu√ß√£o
        4. **RESPOSTAS IDEIAS** para cada item
        5. **DICOS DE APRESENTA√á√ÉO** espec√≠ficos

        Formate como um simulado interativo e realista!
        """

        simulation = await ai_service.get_legal_advice(simulation_prompt, "Voc√™ √© um especialista em recrutamento jur√≠dico.")
        
        # Salvar simula√ß√£o
        coach_collection = mongo_db.get_collection('juristcoach')
        coach_collection.update_one(
            {'user_id': user_id},
            {'$push': {
                'simulations': {
                    'type': sim_type,
                    'content': simulation,
                    'date': datetime.utcnow()
                }
            }}
        )
        
        response_text = (
            f"üíº **SIMULA√á√ÉO - {sim_type.upper()}**\n\n"
            f"{simulation}\n\n"
            "üéØ *Treine suas respostas e melhore seu desempenho!*"
        )
        
        if len(response_text) > 4096:
            parts = [response_text[i:i+4096] for i in range(0, len(response_text), 4096)]
            for part in parts:
                await query.message.reply_text(part, parse_mode='Markdown')
        else:
            await query.message.reply_text(response_text, parse_mode='Markdown')
        
        keyboard = [
            [InlineKeyboardButton("üîÑ Nova Simula√ß√£o", callback_data="coach_interview")],
            [InlineKeyboardButton("üìà Meu Progresso", callback_data="coach_progress")],
            [InlineKeyboardButton("üîô Menu Principal", callback_data="coach_back_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text("üé≠ **Como foi sua performance?**", reply_markup=reply_markup)
        return RECEIVING_ADVICE

    async def career_trends(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Tend√™ncias do mercado jur√≠dico"""
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text("üîÆ **Analisando tend√™ncias do mercado jur√≠dico...**")
        
        trends_prompt = """
        ANALISE AS PRINCIPAIS TEND√äNCIAS DO MERCADO JUR√çDICO BRASILEIRO PARA OS PR√ìXIMOS 2 ANOS:

        INCLUA:

        1. **√ÅREAS EM ALTA**
           - Setores com maior crescimento
           - Novas especializa√ß√µes
           - Nichos promissores

        2. **HABILIDADES MAIS VALORIZADAS**
           - Compet√™ncias t√©cnicas
           - Habilidades comportamentais  
           - Conhecimentos tecnol√≥gicos

        3. **IMPACTOS DA TECNOLOGIA**
           - Lawtechs em ascens√£o
           - IA no Direito
           - Novas ferramentas jur√≠dicas

        4. **MUDAN√áAS NO RECRUTAMENTO**
           - Novos processos seletivos
           - Compet√™ncias exigidas
           - Perfis mais procurados

        5. **RECOMENDA√á√ïES ESTRAT√âGICAS**
           - Como se preparar
           - O que estudar
           - Quais certifica√ß√µes buscar

        Baseie-se em dados reais e proje√ß√µes de mercado!
        """

        trends = await ai_service.get_legal_advice(trends_prompt, "Voc√™ √© um analista de mercado jur√≠dico especializado.")
        
        response_text = (
            "üîÆ **TEND√äNCIAS DO MERCADO JUR√çDICO**\n\n"
            f"{trends}\n\n"
            "üí´ *Prepare-se para o futuro do Direito!*"
        )
        
        if len(response_text) > 4096:
            parts = [response_text[i:i+4096] for i in range(0, len(response_text), 4096)]
            for part in parts:
                await query.message.reply_text(part, parse_mode='Markdown')
        else:
            await query.message.reply_text(response_text, parse_mode='Markdown')
        
        keyboard = [
            [InlineKeyboardButton("üéØ An√°lise de Perfil", callback_data="coach_analysis")],
            [InlineKeyboardButton("üöÄ Planejamento", callback_data="coach_planning")],
            [InlineKeyboardButton("üîô Menu Principal", callback_data="coach_back_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text("üéØ **Como voc√™ vai se preparar?**", reply_markup=reply_markup)
        return RECEIVING_ADVICE

    async def progress_tracker(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Acompanhamento de progresso"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # Buscar dados do usu√°rio
        coach_collection = mongo_db.get_collection('juristcoach')
        user_data = coach_collection.find_one({'user_id': user_id})
        
        if not user_data:
            progress_text = (
                "üìà **ACOMPANHAMENTO DE PROGRESSO**\n\n"
                "Voc√™ ainda n√£o come√ßou sua jornada no JuristCoach!\n\n"
                "üéØ Use a *An√°lise de Perfil* para dar o primeiro passo."
            )
        else:
            # Calcular m√©tricas de progresso
            analysis_date = user_data.get('analysis_date')
            days_since_analysis = (datetime.utcnow() - analysis_date).days if analysis_date else 0
            
            simulations_count = len(user_data.get('simulations', []))
            has_study_plan = 'study_plan' in user_data
            
            progress_text = (
                "üìà **SEU PROGRESSO NO JURISTCOACH**\n\n"
                f"üìÖ **Tempo na jornada:** {days_since_analysis} dias\n"
                f"üé≠ **Simula√ß√µes realizadas:** {simulations_count}\n"
                f"üìö **Plano de estudos:** {'‚úÖ Ativo' if has_study_plan else '‚è≥ Pendente'}\n"
                f"üîÆ **An√°lise de perfil:** ‚úÖ Conclu√≠da\n\n"
            )
            
            # Adicionar insights com base no progresso
            if days_since_analysis > 30:
                progress_text += "üåü **Excelente consist√™ncia!** Continue evoluindo.\n"
            elif days_since_analysis > 7:
                progress_text += "üí´ **Bom come√ßo!** Mantenha o ritmo.\n"
            else:
                progress_text += "üéØ **In√≠cio promissor!** Foco nos pr√≥ximos passos.\n"
            
            # Recomenda√ß√µes personalizadas
            if simulations_count == 0:
                progress_text += "\nüí° **Dica:** Experimente o simulador de entrevistas!\n"
            elif not has_study_plan:
                progress_text += "\nüí° **Dica:** Crie seu roteiro de estudos personalizado!\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ Atualizar Progresso", callback_data="coach_progress")],
            [InlineKeyboardButton("üéØ Nova An√°lise", callback_data="coach_analysis")],
            [InlineKeyboardButton("üîô Menu Principal", callback_data="coach_back_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(progress_text, reply_markup=reply_markup, parse_mode='Markdown')
        return CHOOSING

    async def career_planning(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Planejamento estrat√©gico de carreira"""
        query = update.callback_query
        await query.answer()
        
        planning_text = (
            "üöÄ **PLANEJAMENTO ESTRAT√âGICO DE CARREIRA**\n\n"
            "Vou criar um *plano personalizado* para sua trajet√≥ria!\n\n"
            "Escolha o horizonte temporal:\n\n"
            "‚Ä¢ üéØ **Curto Prazo** (6-12 meses)\n"
            "‚Ä¢ üöÄ **M√©dio Prazo** (1-3 anos)\n" 
            "‚Ä¢ üåü **Longo Prazo** (3-5 anos)\n"
        )
        
        keyboard = [
            [InlineKeyboardButton("üéØ Curto Prazo (6-12 meses)", callback_data="plan_short")],
            [InlineKeyboardButton("üöÄ M√©dio Prazo (1-3 anos)", callback_data="plan_medium")],
            [InlineKeyboardButton("üåü Longo Prazo (3-5 anos)", callback_data="plan_long")],
            [InlineKeyboardButton("üîô Voltar", callback_data="coach_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(planning_text, reply_markup=reply_markup, parse_mode='Markdown')
        return CHOOSING

    async def generate_career_plan(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Gerar plano de carreira com IA"""
        query = update.callback_query
        await query.answer()
        
        plan_type = query.data.replace('plan_', '')
        user_id = query.from_user.id
        
        periods = {
            'short': '6 a 12 meses',
            'medium': '1 a 3 anos', 
            'long': '3 a 5 anos'
        }
        
        period = periods.get(plan_type, 'curto prazo')
        
        await query.edit_message_text(f"üöÄ **Criando seu plano para {period}...**")
        
        # Buscar dados do usu√°rio para personaliza√ß√£o
        coach_collection = mongo_db.get_collection('juristcoach')
        user_data = coach_collection.find_one({'user_id': user_id})
        
        user_context = user_data.get('ia_analysis', '') if user_data else "Perfil jur√≠dico em desenvolvimento"
        
        plan_prompt = f"""
        CRIE UM PLANO ESTRAT√âGICO DE CARREIRA JUR√çDICA:

        CONTEXTO DO USU√ÅRIO:
        {user_context}

        PER√çODO: {period.upper()}

        ESTRUTURE O PLANO COM:

        1. **OBJETIVOS PRINCIPAIS**
           - Metas espec√≠ficas e mensur√°veis
           - Marcos de progresso
           - Indicadores de sucesso

        2. **ROTEIRO DE A√á√ïES**
           - Passos concretos m√™s a m√™s
           - Cursos e certifica√ß√µes
           - Experi√™ncias pr√°ticas necess√°rias

        3. **RECURSOS NECESS√ÅRIOS**
           - Materiais de estudo
           - Ferramentas e tecnologias
           - Networking estrat√©gico

        4. **POTENCIAIS OBST√ÅCULOS**
           - Desafios previstos
           - Estrat√©gias de supera√ß√£o
           - Planos alternativos

        5. **ACOMPANHAMENTO**
           - M√©tricas de acompanhamento
           - Revis√µes peri√≥dicas
           - Ajustes necess√°rios

        Torne o plano pr√°tico, realista e motivador!
        """

        career_plan = await ai_service.get_legal_advice(plan_prompt, "Voc√™ √© um estrategista de carreira jur√≠dica especializado.")
        
        # Salvar plano
        coach_collection.update_one(
            {'user_id': user_id},
            {'$set': {
                f'career_plan_{plan_type}': career_plan,
                f'plan_{plan_type}_date': datetime.utcnow()
            }}
        )
        
        response_text = (
            f"üöÄ **SEU PLANO DE CARREIRA - {period.upper()}**\n\n"
            f"{career_plan}\n\n"
            "üí´ *Execute este plano e transforme sua carreira!*"
        )
        
        if len(response_text) > 4096:
            parts = [response_text[i:i+4096] for i in range(0, len(response_text), 4096)]
            for part in parts:
                await query.message.reply_text(part, parse_mode='Markdown')
        else:
            await query.message.reply_text(response_text, parse_mode='Markdown')
        
        keyboard = [
            [InlineKeyboardButton("üìö Roteiro de Estudos", callback_data="coach_studyplan")],
            [InlineKeyboardButton("üíº Simulador", callback_data="coach_interview")],
            [InlineKeyboardButton("üîô Menu Principal", callback_data="coach_back_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text("üéØ **Pronto para colocar em pr√°tica?**", reply_markup=reply_markup)
        return RECEIVING_ADVICE

    async def back_to_main(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Voltar ao menu principal"""
        query = update.callback_query
        await query.answer()
        
        return await self.start_juristcoach(update, context)

    async def back_to_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Voltar ao menu do JuristCoach"""
        query = update.callback_query
        await query.answer()
        
        welcome_text = (
            "üéØ **JURISTCOACH - MENU PRINCIPAL**\n\n"
            "Escolha uma op√ß√£o para continuar:\n\n"
            "‚ú® **O que posso fazer por voc√™:**\n"
            "‚Ä¢ üéØ An√°lise de perfil profissional\n"  
            "‚Ä¢ üöÄ Planejamento de carreira personalizado\n"
            "‚Ä¢ üìö Recomenda√ß√µes de estudo estrat√©gicas\n"
            "‚Ä¢ üíº Simula√ß√µes de entrevistas e provas\n"
            "‚Ä¢ üìà Acompanhamento de evolu√ß√£o\n"
            "‚Ä¢ üîÆ Previs√µes de mercado jur√≠dico\n"
        )
        
        keyboard = [
            [InlineKeyboardButton("üéØ An√°lise de Perfil", callback_data="coach_analysis")],
            [InlineKeyboardButton("üöÄ Planejamento de Carreira", callback_data="coach_planning")],
            [InlineKeyboardButton("üìö Roteiro de Estudos", callback_data="coach_studyplan")],
            [InlineKeyboardButton("üíº Simulador de Entrevista", callback_data="coach_interview")],
            [InlineKeyboardButton("üìà Meu Progresso", callback_data="coach_progress")],
            [InlineKeyboardButton("üîÆ Tend√™ncias do Mercado", callback_data="coach_trends")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
        return CHOOSING

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancelar conversa√ß√£o"""
        await update.message.reply_text(
            "üëã At√© logo! Lembre-se: *sua carreira jur√≠dica √© uma jornada* üöÄ\n\n"
            "Volte ao JuristCoach quando quiser continuar sua evolu√ß√£o!",
            parse_mode='Markdown'
        )
        return ConversationHandler.END

# Inst√¢ncia global do JuristCoach
jurist_coach = JuristCoach()

# Configurar Conversation Handler
coach_conversation = ConversationHandler(
    entry_points=[
        CommandHandler('juristcoach', jurist_coach.start_juristcoach),
        CallbackQueryHandler(jurist_coach.start_juristcoach, pattern='^juristcoach_start$')
    ],
    states={
        CHOOSING: [
            CallbackQueryHandler(jurist_coach.career_analysis, pattern='^coach_analysis$'),
            CallbackQueryHandler(jurist_coach.career_planning, pattern='^coach_planning$'),
            CallbackQueryHandler(jurist_coach.create_study_plan, pattern='^coach_studyplan$'),
            CallbackQueryHandler(jurist_coach.interview_simulator, pattern='^coach_interview$'),
            CallbackQueryHandler(jurist_coach.progress_tracker, pattern='^coach_progress$'),
            CallbackQueryHandler(jurist_coach.career_trends, pattern='^coach_trends$'),
            CallbackQueryHandler(jurist_coach.start_interview_simulation, pattern='^sim_'),
            CallbackQueryHandler(jurist_coach.generate_career_plan, pattern='^plan_'),
            CallbackQueryHandler(jurist_coach.back_to_menu, pattern='^coach_back$'),
            CallbackQueryHandler(jurist_coach.back_to_main, pattern='^coach_back_main$'),
        ],
        ANALYZING_CAREER: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, jurist_coach.analyze_profile),
            CallbackQueryHandler(jurist_coach.back_to_menu, pattern='^coach_back$'),
        ],
        RECEIVING_ADVICE: [
            CallbackQueryHandler(jurist_coach.back_to_main, pattern='^coach_back_main$'),
            CallbackQueryHandler(jurist_coach.back_to_menu, pattern='^coach_back$'),
        ]
    },
    fallbacks=[
        CommandHandler('cancel', jurist_coach.cancel),
        CallbackQueryHandler(jurist_coach.cancel, pattern='^cancel$')
    ]
)

# Registrar handlers
module_registry.register_conversation_handler(coach_conversation)
module_registry.register_command("juristcoach", jurist_coach.start_juristcoach, "Assistente de carreira jur√≠dica com IA")
module_registry.register_command("coach", jurist_coach.start_juristcoach, "JuristCoach - Mentoria de carreira")

module_registry.register_module("juristcoach")
