import logging
import random
import string
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from app.core.registry import module_registry
from app.core.database import mongo_db
from app.core.config import Config

logger = logging.getLogger(__name__)

class AffiliateSystem:
    def __init__(self):
        self.commission_rates = {
            'legal_consultation': 0.10,  # 10% para consultas jur√≠dicas
            'process_consultation': 0.15,  # 15% para consultas de processos
            'document_analysis': 0.20,  # 20% para an√°lise de documentos
        }
    
    def generate_affiliate_code(self, user_id: int) -> str:
        """Gerar c√≥digo de afiliado √∫nico"""
        base_code = f"JURIST{user_id:06d}"
        random_suffix = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
        return f"{base_code}{random_suffix}"
    
    async def register_affiliate(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Registrar usu√°rio como afiliado"""
        user_id = update.effective_user.id
        user = update.effective_user
        
        # Verificar se j√° √© afiliado
        affiliates = mongo_db.get_collection('affiliates')
        existing_affiliate = affiliates.find_one({'user_id': user_id})
        
        if existing_affiliate:
            await update.message.reply_text(
                "‚úÖ Voc√™ j√° √© um afiliado!\n\n"
                f"üîó Seu c√≥digo: `{existing_affiliate['affiliate_code']}`\n"
                f"üí∞ Comiss√£o total: R$ {existing_affiliate.get('total_commission', 0):.2f}\n\n"
                "Use /meuafiliado para ver seu dashboard."
            )
            return
        
        # Criar novo afiliado
        affiliate_code = self.generate_affiliate_code(user_id)
        affiliate_data = {
            'user_id': user_id,
            'username': user.username,
            'first_name': user.first_name,
            'affiliate_code': affiliate_code,
            'joined_at': datetime.utcnow(),
            'status': 'active',
            'total_commission': 0,
            'pending_commission': 0,
            'paid_commission': 0,
            'referral_count': 0,
            'conversion_rate': 0,
            'last_commission_date': None
        }
        
        affiliates.insert_one(affiliate_data)
        
        # Atualizar usu√°rio como afiliado
        users = mongo_db.get_collection('users')
        users.update_one(
            {'user_id': user_id},
            {'$set': {'is_affiliate': True, 'affiliate_code': affiliate_code}}
        )
        
        welcome_message = (
            "üéâ **Parab√©ns! Voc√™ agora √© um afiliado do JuristBot!**\n\n"
            f"üîó **Seu c√≥digo √∫nico:** `{affiliate_code}`\n\n"
            "üí∏ **Sistema de Comiss√µes:**\n"
            "‚Ä¢ Consultas jur√≠dicas: 10%\n"
            "‚Ä¢ Consultas de processos: 15%\n"
            "‚Ä¢ An√°lise de documentos: 20%\n\n"
            "üì§ **Como divulgar:**\n"
            f"`https://t.me/{context.bot.username}?start={affiliate_code}`\n\n"
            "üìä **Comandos dispon√≠veis:**\n"
            "/meuafiliado - Ver seu dashboard\n"
            "/linkafiliado - Gerar link personalizado\n"
            "/comissoes - Ver suas comiss√µes\n"
            "/saque - Solicitar saque\n\n"
            "üí° *Compartilhe seu link e comece a ganhar!*"
        )
        
        await update.message.reply_text(welcome_message, parse_mode='Markdown')
    
    async def affiliate_dashboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Dashboard do afiliado"""
        user_id = update.effective_user.id
        
        affiliates = mongo_db.get_collection('affiliates')
        affiliate = affiliates.find_one({'user_id': user_id})
        
        if not affiliate:
            await update.message.reply_text(
                "‚ùå Voc√™ ainda n√£o √© um afiliado.\n\n"
                "Use /afiliado para se registrar e come√ßar a ganhar comiss√µes!"
            )
            return
        
        # Buscar estat√≠sticas recentes
        referrals = mongo_db.get_collection('referrals')
        recent_referrals = list(referrals.find({
            'affiliate_code': affiliate['affiliate_code'],
            'created_at': {'$gte': datetime.utcnow() - timedelta(days=30)}
        }))
        
        # Calcular m√©tricas
        active_referrals = [r for r in recent_referrals if r.get('has_converted', False)]
        conversion_rate = len(active_referrals) / len(recent_referrals) * 100 if recent_referrals else 0
        
        dashboard_text = (
            "üìä **Dashboard do Afiliado**\n\n"
            f"üîó C√≥digo: `{affiliate['affiliate_code']}`\n"
            f"üë• Indica√ß√µes totais: {affiliate.get('referral_count', 0)}\n"
            f"üéØ Taxa de convers√£o: {conversion_rate:.1f}%\n\n"
            f"üí∞ **Comiss√µes:**\n"
            f"‚Ä¢ Total acumulado: R$ {affiliate.get('total_commission', 0):.2f}\n"
            f"‚Ä¢ Pendente: R$ {affiliate.get('pending_commission', 0):.2f}\n"
            f"‚Ä¢ Sacado: R$ {affiliate.get('paid_commission', 0):.2f}\n\n"
            f"üìà **√öltimos 30 dias:**\n"
            f"‚Ä¢ Novas indica√ß√µes: {len(recent_referrals)}\n"
            f"‚Ä¢ Convers√µes: {len(active_referrals)}\n"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîó Gerar Link", callback_data="generate_link")],
            [InlineKeyboardButton("üí∞ Comiss√µes", callback_data="view_commissions")],
            [InlineKeyboardButton("üì§ Compartilhar", callback_data="share_affiliate")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(dashboard_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def generate_affiliate_link(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Gerar link de afiliado personalizado"""
        user_id = update.effective_user.id
        
        affiliates = mongo_db.get_collection('affiliates')
        affiliate = affiliates.find_one({'user_id': user_id})
        
        if not affiliate:
            await update.message.reply_text("‚ùå Voc√™ precisa ser um afiliado para gerar links.")
            return
        
        bot_username = context.bot.username
        affiliate_code = affiliate['affiliate_code']
        affiliate_link = f"https://t.me/{bot_username}?start={affiliate_code}"
        
        message_text = (
            "üîó **Seu Link de Afiliado:**\n\n"
            f"`{affiliate_link}`\n\n"
            "üí° **Dicas para divulgar:**\n"
            "‚Ä¢ Compartilhe em grupos jur√≠dicos\n"
            "‚Ä¢ Indique para colegas advogados\n"
            "‚Ä¢ Use em suas redes sociais\n"
            "‚Ä¢ Adicione na sua assinatura de email\n\n"
            "üìä Cada convers√£o gera comiss√£o!"
        )
        
        await update.message.reply_text(message_text, parse_mode='Markdown')
    
    async def handle_referral(self, user_id: int, affiliate_code: str) -> bool:
        """Registrar uma indica√ß√£o"""
        try:
            affiliates = mongo_db.get_collection('affiliates')
            affiliate = affiliates.find_one({'affiliate_code': affiliate_code})
            
            if not affiliate:
                return False
            
            # Registrar a indica√ß√£o
            referrals = mongo_db.get_collection('referrals')
            referral_data = {
                'affiliate_code': affiliate_code,
                'referred_user_id': user_id,
                'created_at': datetime.utcnow(),
                'has_converted': False,
                'conversion_date': None,
                'conversion_type': None,
                'commission_amount': 0
            }
            
            referrals.insert_one(referral_data)
            
            # Atualizar contador do afiliado
            affiliates.update_one(
                {'affiliate_code': affiliate_code},
                {'$inc': {'referral_count': 1}}
            )
            
            return True
            
        except Exception as e:
            logger.error(f"Erro ao registrar indica√ß√£o: {e}")
            return False
    
    async def record_conversion(self, user_id: int, service_type: str, amount: float) -> bool:
        """Registrar convers√£o e calcular comiss√£o"""
        try:
            # Buscar usu√°rio para verificar se veio de indica√ß√£o
            users = mongo_db.get_collection('users')
            user = users.find_one({'user_id': user_id})
            
            if not user or not user.get('referred_by'):
                return False
            
            affiliate_code = user['referred_by']
            commission_rate = self.commission_rates.get(service_type, 0.10)
            commission = amount * commission_rate
            
            # Atualizar refer√™ncia
            referrals = mongo_db.get_collection('referrals')
            referrals.update_one(
                {
                    'affiliate_code': affiliate_code,
                    'referred_user_id': user_id
                },
                {
                    '$set': {
                        'has_converted': True,
                        'conversion_date': datetime.utcnow(),
                        'conversion_type': service_type,
                        'commission_amount': commission
                    }
                }
            )
            
            # Atualizar comiss√µes do afiliado
            affiliates = mongo_db.get_collection('affiliates')
            affiliates.update_one(
                {'affiliate_code': affiliate_code},
                {
                    '$inc': {
                        'total_commission': commission,
                        'pending_commission': commission
                    },
                    '$set': {'last_commission_date': datetime.utcnow()}
                }
            )
            
            logger.info(f"Comiss√£o de R$ {commission:.2f} registrada para afiliado {affiliate_code}")
            return True
            
        except Exception as e:
            logger.error(f"Erro ao registrar convers√£o: {e}")
            return False
    
    async def affiliate_callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Manipular callbacks do sistema de afiliados"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data == "generate_link":
            await self.generate_affiliate_link(update, context)
        elif data == "view_commissions":
            await self.view_commissions(update, context)
        elif data == "share_affiliate":
            await self.share_affiliate_link(update, context)
    
    async def view_commissions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Visualizar detalhes das comiss√µes"""
        user_id = update.effective_user.id
        
        affiliates = mongo_db.get_collection('affiliates')
        affiliate = affiliates.find_one({'user_id': user_id})
        
        if not affiliate:
            await update.message.reply_text("‚ùå Voc√™ n√£o √© um afiliado.")
            return
        
        # Buscar comiss√µes recentes
        referrals = mongo_db.get_collection('referrals')
        recent_commissions = list(referrals.find({
            'affiliate_code': affiliate['affiliate_code'],
            'has_converted': True
        }).sort('conversion_date', -1).limit(10))
        
        if not recent_commissions:
            message = "üí∞ **Suas Comiss√µes**\n\nAinda n√£o h√° comiss√µes registradas."
        else:
            message = "üí∞ **√öltimas Comiss√µes**\n\n"
            for commission in recent_commissions:
                date = commission['conversion_date'].strftime("%d/%m/%Y")
                amount = commission['commission_amount']
                service = commission.get('conversion_type', 'servi√ßo')
                message += f"‚Ä¢ {date}: R$ {amount:.2f} ({service})\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def share_affiliate_link(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Compartilhar link de afiliado"""
        user_id = update.effective_user.id
        
        affiliates = mongo_db.get_collection('affiliates')
        affiliate = affiliates.find_one({'user_id': user_id})
        
        if not affiliate:
            await update.message.reply_text("‚ùå Voc√™ n√£o √© um afiliado.")
            return
        
        share_text = (
            "üë®‚Äç‚öñÔ∏è *Recomendo o JuristBot - Assistente Jur√≠dico com IA!*\n\n"
            "ü§ñ Um bot completo para:\n"
            "‚Ä¢ Consultas jur√≠dicas inteligentes\n"
            "‚Ä¢ An√°lise de processos\n"
            "‚Ä¢ Pesquisa jur√≠dica\n"
            "‚Ä¢ Documentos automatizados\n\n"
            f"üîó Acesse: https://t.me/{context.bot.username}?start={affiliate['affiliate_code']}\n\n"
            "#JuristBot #Direito #IA #Advocacia"
        )
        
        await update.message.reply_text(
            share_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üì§ Compartilhar", 
                    url=f"https://t.me/share/url?url=https://t.me/{context.bot.username}?start={affiliate['affiliate_code']}&text={share_text}")
            ]])
        )

# Inst√¢ncia global do sistema de afiliados
affiliate_system = AffiliateSystem()

# Registrar comandos e handlers
module_registry.register_command("afiliado", affiliate_system.register_affiliate, "Tornar-se um afiliado")
module_registry.register_command("meuafiliado", affiliate_system.affiliate_dashboard, "Ver dashboard de afiliado")
module_registry.register_command("linkafiliado", affiliate_system.generate_affiliate_link, "Gerar link de afiliado")
module_registry.register_command("comissoes", affiliate_system.view_commissions, "Ver minhas comiss√µes")
module_registry.register_callback("generate_link", affiliate_system.affiliate_callback_handler)
module_registry.register_callback("view_commissions", affiliate_system.affiliate_callback_handler)
module_registry.register_callback("share_affiliate", affiliate_system.affiliate_callback_handler)

module_registry.register_module("affiliate_system")
